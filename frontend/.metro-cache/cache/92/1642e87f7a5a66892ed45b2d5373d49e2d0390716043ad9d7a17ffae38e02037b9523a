{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"normalizeRef\", {\n    enumerable: true,\n    get: function () {\n      return normalizeRef;\n    }\n  });\n  Object.defineProperty(exports, \"buildPassageDeeplink\", {\n    enumerable: true,\n    get: function () {\n      return buildPassageDeeplink;\n    }\n  });\n  Object.defineProperty(exports, \"parseCitations\", {\n    enumerable: true,\n    get: function () {\n      return parseCitations;\n    }\n  });\n  Object.defineProperty(exports, \"truncateCitation\", {\n    enumerable: true,\n    get: function () {\n      return truncateCitation;\n    }\n  });\n  Object.defineProperty(exports, \"findFirstMatch\", {\n    enumerable: true,\n    get: function () {\n      return findFirstMatch;\n    }\n  });\n  /**\n   * Deep link utilities for Bible Chat\n   */\n\n  // Book name aliases (EN)\n  const EN_ALIASES = {\n    'Jn': 'John',\n    'Mt': 'Matthew',\n    'Mk': 'Mark',\n    'Lk': 'Luke',\n    'Ps': 'Psalms',\n    'Phil': 'Philippians',\n    'Rom': 'Romans',\n    'Prov': 'Proverbs',\n    'Isa': 'Isaiah',\n    'Jer': 'Jeremiah',\n    'Jas': 'James',\n    'Tim': 'Timothy',\n    'Cor': 'Corinthians'\n  };\n\n  // Book name aliases (RU)\n  const RU_ALIASES = {\n    'Ин': 'Иоанна',\n    'Мф': 'Матфея',\n    'Мк': 'Марка',\n    'Лк': 'Луки',\n    'Пс': 'Псалом',\n    'Флп': 'Филиппийцам',\n    'Рим': 'Римлянам',\n    'Прит': 'Притчи',\n    'Ис': 'Исайя',\n    'Иер': 'Иеремия',\n    'Иак': 'Иакова'\n  };\n\n  /**\n   * Normalize book name aliases\n   */\n  const normalizeBookName = (book, locale) => {\n    const aliases = locale === 'en' ? EN_ALIASES : RU_ALIASES;\n    return aliases[book] || book;\n  };\n\n  /**\n   * Normalize reference (resolve aliases)\n   * @param ref - Reference string (e.g., \"Jn 3:16\" or \"Ин 3:16\")\n   * @param locale - Language locale\n   * @returns Normalized reference\n   */\n  const normalizeRef = (ref, locale) => {\n    const parts = ref.split(' ');\n    if (parts.length >= 2) {\n      const book = normalizeBookName(parts[0], locale);\n      const rest = parts.slice(1).join(' ');\n      return `${book} ${rest}`;\n    }\n    return ref;\n  };\n\n  /**\n   * Build deep link for passage viewer\n   * Format: app://passage/{ref}\n   */\n  const buildPassageDeeplink = (ref, locale) => {\n    const normalizedRef = normalizeRef(ref, locale);\n    return `app://passage/${encodeURIComponent(normalizedRef)}`;\n  };\n\n  /**\n   * Parse citations from text using regex\n   * Supports EN and RU formats\n   */\n  const parseCitations = (text, locale) => {\n    const citations = [];\n\n    // EN regex: \"John 3:16\", \"1 Corinthians 10:13\", \"Psalm 23:1-4\"\n    const enRegex = /([1-3]?\\s?[A-Za-z]+)\\s+(\\d{1,3}):(\\d{1,3}(?:-\\d{1,3})?)/g;\n\n    // RU regex: \"Иоанна 3:16\", \"1 Коринфянам 10:13\", \"Псалом 23:1-4\"\n    const ruRegex = /([1-3]?\\s?[А-ЯЁ][а-яё]+)\\s+(\\d{1,3}):(\\d{1,3}(?:-\\d{1,3})?)/g;\n    const regex = locale === 'en' ? enRegex : ruRegex;\n    const matches = text.matchAll(regex);\n    for (const match of matches) {\n      citations.push(match[0]);\n    }\n\n    // Deduplicate and limit to max 5\n    return [...new Set(citations)].slice(0, 5);\n  };\n\n  /**\n   * Truncate long citation text\n   */\n  const truncateCitation = (ref, maxLength = 25) => {\n    if (ref.length <= maxLength) return ref;\n    return ref.substring(0, maxLength - 1) + '…';\n  };\n\n  /**\n   * Find first match of query in text (case-insensitive, whole-word)\n   * Returns character offset range or null\n   */\n  const findFirstMatch = (text, query) => {\n    const normalizedText = text.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    // Try whole-word match first\n    const wordRegex = new RegExp(`\\\\b${normalizedQuery}\\\\b`, 'i');\n    const match = text.match(wordRegex);\n    if (match && match.index !== undefined) {\n      return {\n        start: match.index,\n        end: match.index + match[0].length\n      };\n    }\n\n    // Fallback: simple substring match\n    const index = normalizedText.indexOf(normalizedQuery);\n    if (index !== -1) {\n      return {\n        start: index,\n        end: index + query.length\n      };\n    }\n    return null;\n  };\n});","lineCount":164,"map":[[7,2,51,0,"Object"],[7,8,51,0],[7,9,51,0,"defineProperty"],[7,23,51,0],[7,24,51,0,"exports"],[7,31,51,0],[8,4,51,0,"enumerable"],[8,14,51,0],[9,4,51,0,"get"],[9,7,51,0],[9,18,51,0,"get"],[9,19,51,0],[10,6,51,0],[10,13,51,0,"normalizeRef"],[10,25,51,0],[11,4,51,0],[12,2,51,0],[13,2,65,0,"Object"],[13,8,65,0],[13,9,65,0,"defineProperty"],[13,23,65,0],[13,24,65,0,"exports"],[13,31,65,0],[14,4,65,0,"enumerable"],[14,14,65,0],[15,4,65,0,"get"],[15,7,65,0],[15,18,65,0,"get"],[15,19,65,0],[16,6,65,0],[16,13,65,0,"buildPassageDeeplink"],[16,33,65,0],[17,4,65,0],[18,2,65,0],[19,2,74,0,"Object"],[19,8,74,0],[19,9,74,0,"defineProperty"],[19,23,74,0],[19,24,74,0,"exports"],[19,31,74,0],[20,4,74,0,"enumerable"],[20,14,74,0],[21,4,74,0,"get"],[21,7,74,0],[21,18,74,0,"get"],[21,19,74,0],[22,6,74,0],[22,13,74,0,"parseCitations"],[22,27,74,0],[23,4,74,0],[24,2,74,0],[25,2,97,0,"Object"],[25,8,97,0],[25,9,97,0,"defineProperty"],[25,23,97,0],[25,24,97,0,"exports"],[25,31,97,0],[26,4,97,0,"enumerable"],[26,14,97,0],[27,4,97,0,"get"],[27,7,97,0],[27,18,97,0,"get"],[27,19,97,0],[28,6,97,0],[28,13,97,0,"truncateCitation"],[28,29,97,0],[29,4,97,0],[30,2,97,0],[31,2,106,0,"Object"],[31,8,106,0],[31,9,106,0,"defineProperty"],[31,23,106,0],[31,24,106,0,"exports"],[31,31,106,0],[32,4,106,0,"enumerable"],[32,14,106,0],[33,4,106,0,"get"],[33,7,106,0],[33,18,106,0,"get"],[33,19,106,0],[34,6,106,0],[34,13,106,0,"findFirstMatch"],[34,27,106,0],[35,4,106,0],[36,2,106,0],[37,2,1,0],[38,0,2,0],[39,0,3,0],[41,2,5,0],[42,2,6,0],[42,8,6,6,"EN_ALIASES"],[42,18,6,40],[42,21,6,43],[43,4,7,2],[43,8,7,6],[43,10,7,8],[43,16,7,14],[44,4,8,2],[44,8,8,6],[44,10,8,8],[44,19,8,17],[45,4,9,2],[45,8,9,6],[45,10,9,8],[45,16,9,14],[46,4,10,2],[46,8,10,6],[46,10,10,8],[46,16,10,14],[47,4,11,2],[47,8,11,6],[47,10,11,8],[47,18,11,16],[48,4,12,2],[48,10,12,8],[48,12,12,10],[48,25,12,23],[49,4,13,2],[49,9,13,7],[49,11,13,9],[49,19,13,17],[50,4,14,2],[50,10,14,8],[50,12,14,10],[50,22,14,20],[51,4,15,2],[51,9,15,7],[51,11,15,9],[51,19,15,17],[52,4,16,2],[52,9,16,7],[52,11,16,9],[52,21,16,19],[53,4,17,2],[53,9,17,7],[53,11,17,9],[53,18,17,16],[54,4,18,2],[54,9,18,7],[54,11,18,9],[54,20,18,18],[55,4,19,2],[55,9,19,7],[55,11,19,9],[56,2,20,0],[56,3,20,1],[58,2,22,0],[59,2,23,0],[59,8,23,6,"RU_ALIASES"],[59,18,23,40],[59,21,23,43],[60,4,24,2],[60,8,24,6],[60,10,24,8],[60,18,24,16],[61,4,25,2],[61,8,25,6],[61,10,25,8],[61,18,25,16],[62,4,26,2],[62,8,26,6],[62,10,26,8],[62,17,26,15],[63,4,27,2],[63,8,27,6],[63,10,27,8],[63,16,27,14],[64,4,28,2],[64,8,28,6],[64,10,28,8],[64,18,28,16],[65,4,29,2],[65,9,29,7],[65,11,29,9],[65,24,29,22],[66,4,30,2],[66,9,30,7],[66,11,30,9],[66,21,30,19],[67,4,31,2],[67,10,31,8],[67,12,31,10],[67,20,31,18],[68,4,32,2],[68,8,32,6],[68,10,32,8],[68,17,32,15],[69,4,33,2],[69,9,33,7],[69,11,33,9],[69,20,33,18],[70,4,34,2],[70,9,34,7],[70,11,34,9],[71,2,35,0],[71,3,35,1],[73,2,37,0],[74,0,38,0],[75,0,39,0],[76,2,40,0],[76,8,40,6,"normalizeBookName"],[76,25,40,23],[76,28,40,26,"normalizeBookName"],[76,29,40,27,"book"],[76,33,40,39],[76,35,40,41,"locale"],[76,41,40,60],[76,46,40,73],[77,4,41,2],[77,10,41,8,"aliases"],[77,17,41,15],[77,20,41,18,"locale"],[77,26,41,24],[77,31,41,29],[77,35,41,33],[77,38,41,36,"EN_ALIASES"],[77,48,41,46],[77,51,41,49,"RU_ALIASES"],[77,61,41,59],[78,4,42,2],[78,11,42,9,"aliases"],[78,18,42,16],[78,19,42,17,"book"],[78,23,42,21],[78,24,42,22],[78,28,42,26,"book"],[78,32,42,30],[79,2,43,0],[79,3,43,1],[81,2,45,0],[82,0,46,0],[83,0,47,0],[84,0,48,0],[85,0,49,0],[86,0,50,0],[87,2,51,7],[87,8,51,13,"normalizeRef"],[87,20,51,25],[87,23,51,28,"normalizeRef"],[87,24,51,29,"ref"],[87,27,51,40],[87,29,51,42,"locale"],[87,35,51,61],[87,40,51,74],[88,4,52,2],[88,10,52,8,"parts"],[88,15,52,13],[88,18,52,16,"ref"],[88,21,52,19],[88,22,52,20,"split"],[88,27,52,25],[88,28,52,26],[88,31,52,29],[88,32,52,30],[89,4,53,2],[89,8,53,6,"parts"],[89,13,53,11],[89,14,53,12,"length"],[89,20,53,18],[89,24,53,22],[89,25,53,23],[89,27,53,25],[90,6,54,4],[90,12,54,10,"book"],[90,16,54,14],[90,19,54,17,"normalizeBookName"],[90,36,54,34],[90,37,54,35,"parts"],[90,42,54,40],[90,43,54,41],[90,44,54,42],[90,45,54,43],[90,47,54,45,"locale"],[90,53,54,51],[90,54,54,52],[91,6,55,4],[91,12,55,10,"rest"],[91,16,55,14],[91,19,55,17,"parts"],[91,24,55,22],[91,25,55,23,"slice"],[91,30,55,28],[91,31,55,29],[91,32,55,30],[91,33,55,31],[91,34,55,32,"join"],[91,38,55,36],[91,39,55,37],[91,42,55,40],[91,43,55,41],[92,6,56,4],[92,13,56,11],[92,16,56,14,"book"],[92,20,56,18],[92,24,56,22,"rest"],[92,28,56,26],[92,30,56,28],[93,4,57,2],[94,4,58,2],[94,11,58,9,"ref"],[94,14,58,12],[95,2,59,0],[95,3,59,1],[97,2,61,0],[98,0,62,0],[99,0,63,0],[100,0,64,0],[101,2,65,7],[101,8,65,13,"buildPassageDeeplink"],[101,28,65,33],[101,31,65,36,"buildPassageDeeplink"],[101,32,65,37,"ref"],[101,35,65,48],[101,37,65,50,"locale"],[101,43,65,69],[101,48,65,82],[102,4,66,2],[102,10,66,8,"normalizedRef"],[102,23,66,21],[102,26,66,24,"normalizeRef"],[102,38,66,36],[102,39,66,37,"ref"],[102,42,66,40],[102,44,66,42,"locale"],[102,50,66,48],[102,51,66,49],[103,4,67,2],[103,11,67,9],[103,28,67,26,"encodeURIComponent"],[103,46,67,44],[103,47,67,45,"normalizedRef"],[103,60,67,58],[103,61,67,59],[103,63,67,61],[104,2,68,0],[104,3,68,1],[106,2,70,0],[107,0,71,0],[108,0,72,0],[109,0,73,0],[110,2,74,7],[110,8,74,13,"parseCitations"],[110,22,74,27],[110,25,74,30,"parseCitations"],[110,26,74,31,"text"],[110,30,74,43],[110,32,74,45,"locale"],[110,38,74,64],[110,43,74,79],[111,4,75,2],[111,10,75,8,"citations"],[111,19,75,27],[111,22,75,30],[111,24,75,32],[113,4,77,2],[114,4,78,2],[114,10,78,8,"enRegex"],[114,17,78,15],[114,20,78,18],[114,78,78,76],[116,4,80,2],[117,4,81,2],[117,10,81,8,"ruRegex"],[117,17,81,15],[117,20,81,18],[117,82,81,80],[118,4,83,2],[118,10,83,8,"regex"],[118,15,83,13],[118,18,83,16,"locale"],[118,24,83,22],[118,29,83,27],[118,33,83,31],[118,36,83,34,"enRegex"],[118,43,83,41],[118,46,83,44,"ruRegex"],[118,53,83,51],[119,4,84,2],[119,10,84,8,"matches"],[119,17,84,15],[119,20,84,18,"text"],[119,24,84,22],[119,25,84,23,"matchAll"],[119,33,84,31],[119,34,84,32,"regex"],[119,39,84,37],[119,40,84,38],[120,4,86,2],[120,9,86,7],[120,15,86,13,"match"],[120,20,86,18],[120,24,86,22,"matches"],[120,31,86,29],[120,33,86,31],[121,6,87,4,"citations"],[121,15,87,13],[121,16,87,14,"push"],[121,20,87,18],[121,21,87,19,"match"],[121,26,87,24],[121,27,87,25],[121,28,87,26],[121,29,87,27],[121,30,87,28],[122,4,88,2],[124,4,90,2],[125,4,91,2],[125,11,91,9],[125,12,91,10],[125,15,91,13],[125,19,91,17,"Set"],[125,22,91,20],[125,23,91,21,"citations"],[125,32,91,30],[125,33,91,31],[125,34,91,32],[125,35,91,33,"slice"],[125,40,91,38],[125,41,91,39],[125,42,91,40],[125,44,91,42],[125,45,91,43],[125,46,91,44],[126,2,92,0],[126,3,92,1],[128,2,94,0],[129,0,95,0],[130,0,96,0],[131,2,97,7],[131,8,97,13,"truncateCitation"],[131,24,97,29],[131,27,97,32,"truncateCitation"],[131,28,97,33,"ref"],[131,31,97,44],[131,33,97,46,"maxLength"],[131,42,97,63],[131,45,97,66],[131,47,97,68],[131,52,97,81],[132,4,98,2],[132,8,98,6,"ref"],[132,11,98,9],[132,12,98,10,"length"],[132,18,98,16],[132,22,98,20,"maxLength"],[132,31,98,29],[132,33,98,31],[132,40,98,38,"ref"],[132,43,98,41],[133,4,99,2],[133,11,99,9,"ref"],[133,14,99,12],[133,15,99,13,"substring"],[133,24,99,22],[133,25,99,23],[133,26,99,24],[133,28,99,26,"maxLength"],[133,37,99,35],[133,40,99,38],[133,41,99,39],[133,42,99,40],[133,45,99,43],[133,48,99,46],[134,2,100,0],[134,3,100,1],[136,2,102,0],[137,0,103,0],[138,0,104,0],[139,0,105,0],[140,2,106,7],[140,8,106,13,"findFirstMatch"],[140,22,106,27],[140,25,106,30,"findFirstMatch"],[140,26,106,31,"text"],[140,30,106,43],[140,32,106,45,"query"],[140,37,106,58],[140,42,106,102],[141,4,107,2],[141,10,107,8,"normalizedText"],[141,24,107,22],[141,27,107,25,"text"],[141,31,107,29],[141,32,107,30,"toLowerCase"],[141,43,107,41],[141,44,107,42],[141,45,107,43],[142,4,108,2],[142,10,108,8,"normalizedQuery"],[142,25,108,23],[142,28,108,26,"query"],[142,33,108,31],[142,34,108,32,"toLowerCase"],[142,45,108,43],[142,46,108,44],[142,47,108,45],[144,4,110,2],[145,4,111,2],[145,10,111,8,"wordRegex"],[145,19,111,17],[145,22,111,20],[145,26,111,24,"RegExp"],[145,32,111,30],[145,33,111,31],[145,39,111,37,"normalizedQuery"],[145,54,111,52],[145,59,111,57],[145,61,111,59],[145,64,111,62],[145,65,111,63],[146,4,112,2],[146,10,112,8,"match"],[146,15,112,13],[146,18,112,16,"text"],[146,22,112,20],[146,23,112,21,"match"],[146,28,112,26],[146,29,112,27,"wordRegex"],[146,38,112,36],[146,39,112,37],[147,4,114,2],[147,8,114,6,"match"],[147,13,114,11],[147,17,114,15,"match"],[147,22,114,20],[147,23,114,21,"index"],[147,28,114,26],[147,33,114,31,"undefined"],[147,42,114,40],[147,44,114,42],[148,6,115,4],[148,13,115,11],[149,8,116,6,"start"],[149,13,116,11],[149,15,116,13,"match"],[149,20,116,18],[149,21,116,19,"index"],[149,26,116,24],[150,8,117,6,"end"],[150,11,117,9],[150,13,117,11,"match"],[150,18,117,16],[150,19,117,17,"index"],[150,24,117,22],[150,27,117,25,"match"],[150,32,117,30],[150,33,117,31],[150,34,117,32],[150,35,117,33],[150,36,117,34,"length"],[151,6,118,4],[151,7,118,5],[152,4,119,2],[154,4,121,2],[155,4,122,2],[155,10,122,8,"index"],[155,15,122,13],[155,18,122,16,"normalizedText"],[155,32,122,30],[155,33,122,31,"indexOf"],[155,40,122,38],[155,41,122,39,"normalizedQuery"],[155,56,122,54],[155,57,122,55],[156,4,123,2],[156,8,123,6,"index"],[156,13,123,11],[156,18,123,16],[156,19,123,17],[156,20,123,18],[156,22,123,20],[157,6,124,4],[157,13,124,11],[158,8,125,6,"start"],[158,13,125,11],[158,15,125,13,"index"],[158,20,125,18],[159,8,126,6,"end"],[159,11,126,9],[159,13,126,11,"index"],[159,18,126,16],[159,21,126,19,"query"],[159,26,126,24],[159,27,126,25,"length"],[160,6,127,4],[160,7,127,5],[161,4,128,2],[162,4,130,2],[162,11,130,9],[162,15,130,13],[163,2,131,0],[163,3,131,1],[164,0,131,2],[164,3]],"functionMap":{"names":["<global>","normalizeBookName","normalizeRef","buildPassageDeeplink","parseCitations","truncateCitation","findFirstMatch"],"mappings":"AAA;0BCuC;CDG;4BEQ;CFQ;oCGM;CHG;8BIM;CJkB;gCKK;CLG;8BMM;CNyB"},"hasCjsExports":false},"type":"js/module"}]}